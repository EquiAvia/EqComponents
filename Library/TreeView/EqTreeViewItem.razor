@using Microsoft.AspNetCore.Components.Web.Virtualization
@typeparam TValue
<div id="EQ-@Item.UniqueIdentifier" 
	@onclick='ItemSelected'					@onclick:stopPropagation="true" 
	@ondblclick='ItemDoubleClicked'			@ondblclick:stopPropagation="true"
	@oncontextmenu='ContextMenuRequested'	@oncontextmenu:preventDefault="true"	@oncontextmenu:stopPropagation="true"
	class="@(!CompactView?ItemCSSClass:"") @(Item.IsSelected&&!CompactView?SelectedCSSClass:"")">
	<div class="@(CompactView?"compact-item":"")">
		@if (Item.HasChildren)
		{
			<span class="caret @(Item.IsExpanded ? "caret-down" : "")" @onclick="ToggleExpand" @onclick:stopPropagation="true"></span>
		}
		@if (ItemTemplate == null)
		{
			@if (Item.IsSelected)
			{
				<b>@Item.Label</b>
			}
			else
			{
				@Item.Label
			}
		} else if (SelectedItemTemplate != null && Item.IsSelected) 
		{
			@SelectedItemTemplate.Invoke(Item);
		}
		else
		{
			@ItemTemplate.Invoke(Item);
		}
		@if (Item.HasChildren && Item.IsExpanded)
		{
			<ul>
				<Virtualize TItem="EqTreeItem<TValue>" Items="Item?.Children?.Where(i => i.IsVisible).ToList()" Context="child">
					<EqTreeViewItem TValue=@TValue
							@ref="@child.eqTreeViewItem"
							Item="@child"
							KeyPropertyName="@KeyPropertyName"
							ValuePropertyName="@ValuePropertyName"
							@key="@child.UniqueIdentifier"
							SelectedCSSClass="@SelectedCSSClass"
							ItemCSSClass="@ItemCSSClass"
							OnItemSelected="@OnItemSelected"
							OnItemDoubleClicked="@OnItemDoubleClicked"
							OnItemRightClicked="@OnItemRightClicked"
							ItemTemplate="@ItemTemplate"
							SelectedItemTemplate="@SelectedItemTemplate"
							CompactView="@CompactView"></EqTreeViewItem>
				</Virtualize>
			</ul>
		}
	</div>
</div>

@code {
	[CascadingParameter] public EqTreeView<TValue> EqTreeView { get; set; }
	[Parameter] public string KeyPropertyName { get; set; } = "Id";
	[Parameter] public string ValuePropertyName { get; set; } = "Name";
	[Parameter] public EqTreeItem<TValue> Item { get; set; }
	[Parameter] public EventCallback<EqTreeItem<TValue>> OnItemSelected { get; set; }
	[Parameter] public EventCallback<EqTreeItem<TValue>> OnItemDoubleClicked { get; set; }
	[Parameter] public EventCallback<EqTreeItem<TValue>> OnItemRightClicked { get; set; }
	[Parameter] public bool CompactView { get; set; } = false;
	[Parameter] public RenderFragment<EqTreeItem<TValue>> ItemTemplate { get; set; }
	[Parameter] public RenderFragment<EqTreeItem<TValue>> SelectedItemTemplate { get; set; }
	[Parameter] public string SelectedCSSClass { get; set; } = "selected-item";
	[Parameter] public string ItemCSSClass { get; set; } = "item";

	protected string caretClass = "";

	protected async override Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
	}

	protected async Task ItemSelected(MouseEventArgs args)
	{
		Item.IsSelected = true;
		await OnItemSelected.InvokeAsync(Item);
	}

	protected async Task ContextMenuRequested(MouseEventArgs args)
	{
		Item.IsSelected = true;
		if (args.Button == 2) //Right button clicked
		{
			await OnItemRightClicked.InvokeAsync(Item);
		}
	}

	protected async Task ItemDoubleClicked(MouseEventArgs args)
	{
		Item.IsSelected = true;
		await OnItemDoubleClicked.InvokeAsync(Item);
	}

	protected void ToggleExpand(MouseEventArgs args)
	{
		Item.IsExpanded = !Item.IsExpanded;
	}

	private async ValueTask<ItemsProviderResult<EqTreeItem<TValue>>> LoadItemChildren(ItemsProviderRequest request)
	{
		var children = Item.Children.Where(i => i.IsVisible);

		return new ItemsProviderResult<EqTreeItem<TValue>>(
			children.Skip(request.StartIndex).Take(request.Count),
			children.Count<EqTreeItem<TValue>>());
	}

	public void Refresh()
	{
		this.StateHasChanged();
		Console.WriteLine($"Refreshed {Item.Label}");
	}

}
