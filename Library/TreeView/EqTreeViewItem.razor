@typeparam TValue
<li id="EQ-@Item.UniqueIdentifier" @onclick='ItemSelected' @onclick:stopPropagation="true"
    class="@(!CompactView?"item":"") @(Item.IsSelected&&!CompactView?selectedClass:"")">
    <div class="@(CompactView?"compact-item":"")">
        @if (Item.HasChildren)
        {
            <span class="caret @(Item.IsExpanded ? "caret-down" : "")" @onclick="ToggleExpand" @onclick:stopPropagation="true"></span>
        }
        @if (Item.IsSelected)
        {
            <b>@Item.Label</b>
        }
        else
        {
            @Item.Label
        }
        @if (Item.HasChildren && Item.IsExpanded)
        {
            <ul>
                @foreach (var child in Item.Children.Where(i => i.IsVisible))
                {
                    <EqTreeViewItem TValue=@TValue
                                    @ref="@child.eqTreeViewItem"
                                    Item="@child"
                                    KeyPropertyName="@KeyPropertyName"
                                    ValuePropertyName="@ValuePropertyName"
                                    @key="@child.UniqueIdentifier"
                                    OnItemSelected="@OnItemSelected"
                                    CompactView="@CompactView"></EqTreeViewItem>
                }
            </ul>
        }
    </div>
</li>

@code {
    [CascadingParameter] public EqTreeView<TValue> EqTreeView { get; set; }
    [Parameter] public string KeyPropertyName { get; set; } = "Id";
    [Parameter] public string ValuePropertyName { get; set; } = "Name";
    [Parameter] public EqTreeItem Item { get; set; }
    [Parameter] public EventCallback<EqTreeItem> OnItemSelected { get; set; }
    [Parameter] public bool CompactView { get; set; } = false;

    protected string caretClass = "";
    protected string selectedClass = "selected-item";

    protected async Task ItemSelected(MouseEventArgs args)
    {
        Item.IsSelected = true;
        await OnItemSelected.InvokeAsync(Item);
    }

    protected void ToggleExpand(MouseEventArgs args)
    {
        Item.IsExpanded = !Item.IsExpanded;
    }

    public void Refresh()
    {
        this.StateHasChanged();
        Console.WriteLine($"Refreshed {Item.Label}");
    }

}
